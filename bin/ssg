#!/usr/bin/env ruby

STDERR.sync = true

require 'commonmarker'
require 'erb'
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'yaml'

options = OpenStruct.new(src_dir: '.', dst_dir: '.')

EXAMPLE = <<-EXAMPLE.freeze


Example files:

  site.yaml
  -----------

  layout:
    title: My Blog
    date: 01-01-1970

  entries:
    post1:
      markdown: post1.md

  date: 05-04-2019



  layout.erb
  ----------

  <!doctype html>
  <html>
    <head>
      <meta charset="utf-8"/>
      <title><%= title %></title>
    </head>
    <body>
      <%= markdown %>
    </body>
    <footer>
      <p>Posted on: <%= date %></p>
    </footer>
  </html>



  post1.md
  --------

  # Post title

  ## Some code
  ```ruby
    puts 'Hello world!'
  ```
EXAMPLE

ARGV.options do |opts|
  opts.on(
    '-i',
    '--input-dir=INPUT_DIR',
    'Directory with site.yaml and layout.erb files'
  ) do |val|
    options.src_dir = val
  end

  opts.on(
    '-o',
    '--output-dir=OUTPUT_DIR',
    'Directory where site will be generated (if not exists, it will be created)'
  ) do |val|
    options.dst_dir = val
  end

  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    puts EXAMPLE
    exit
  end

  opts.parse!
end

Dir.chdir(options.src_dir)

SITE_PATH = './site.yaml'.freeze
LAYOUT_PATH = './layout.erb'.freeze

abort("#{SITE_PATH} not found") unless File.file? SITE_PATH
abort("#{LAYOUT_PATH} not found") unless File.file? LAYOUT_PATH

site = YAML.load_file(SITE_PATH)
template = File.read(LAYOUT_PATH)

layout = site.fetch('layout', {})
entries = site.fetch('entries', {})
abort('No entries on site.yaml') if entries.empty?

def markdown_to_html(file)
  CommonMarker.render_html(File.read(file), :DEFAULT)
end

def erb(template, vars)
  ERB.new(template).result(OpenStruct.new(vars).instance_eval { binding })
end

compiled_entries = entries.map do |id, tags|
  entry = layout.merge(tags)
  entry['markdown'] = markdown_to_html(tags['markdown'])

  { id: id, html: erb(template, entry) }
end

FileUtils.mkdir_p(options.dst_dir) unless File.directory?(options.dst_dir)

Dir.chdir(options.dst_dir)

compiled_entries.each do |entry|
  File.write("./#{entry[:id]}.html", entry[:html])
end
